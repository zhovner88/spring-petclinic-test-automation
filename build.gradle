plugins {
  id 'java'
  id 'checkstyle'
  id 'org.springframework.boot' version '3.5.0'
  id 'io.spring.dependency-management' version '1.1.7'
  id 'org.graalvm.buildtools.native' version '0.10.6'
  id 'org.cyclonedx.bom' version '2.3.1'
  id 'io.spring.javaformat' version '0.0.46'
  id "io.spring.nohttp" version "0.0.11"
}

gradle.startParameter.excludedTaskNames += [ "checkFormatAot", "checkFormatAotTest" ]

group = 'org.springframework.samples'
version = '3.5.0'

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(17)
  }
}

repositories {
  mavenCentral()
}

// Configure source sets to include test-suites
sourceSets {
  main {
    java {
      srcDirs = ['src/main/java']
    }
  }
  test {
    java {
      srcDirs = ['src/test/java', 'src/test-suites/api-tests/java', 'src/test-suites/integration-tests/java', 'src/test-suites/performance-tests/java', 'src/test-suites/e2e-tests/java']
    }
    resources {
      srcDirs = ['src/test/resources', 'src/test-suites/api-tests/resources', 'src/test-suites/integration-tests/resources', 'src/test-suites/performance-tests/resources', 'src/test-suites/e2e-tests/resources']
    }
  }
}

ext.checkstyleVersion = "10.25.0"
ext.springJavaformatCheckstyleVersion = "0.0.46"
ext.webjarsLocatorLiteVersion = "1.1.0"
ext.webjarsFontawesomeVersion = "4.7.0"
ext.webjarsBootstrapVersion = "5.3.6"

dependencies {
  implementation 'org.springframework.boot:spring-boot-starter-cache'
  implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
  implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
  implementation 'org.springframework.boot:spring-boot-starter-web'
  implementation 'org.springframework.boot:spring-boot-starter-validation'
  implementation 'javax.cache:cache-api'
  implementation 'jakarta.xml.bind:jakarta.xml.bind-api'
  runtimeOnly 'org.springframework.boot:spring-boot-starter-actuator'
  runtimeOnly "org.webjars:webjars-locator-lite:${webjarsLocatorLiteVersion}"
  runtimeOnly "org.webjars.npm:bootstrap:${webjarsBootstrapVersion}"
  runtimeOnly "org.webjars.npm:font-awesome:${webjarsFontawesomeVersion}"
  runtimeOnly 'com.github.ben-manes.caffeine:caffeine'
  runtimeOnly 'com.h2database:h2'
  runtimeOnly 'com.mysql:mysql-connector-j'
  runtimeOnly 'org.postgresql:postgresql'
  developmentOnly 'org.springframework.boot:spring-boot-devtools'
  
  // Basic Testing Dependencies
  testImplementation 'org.springframework.boot:spring-boot-starter-test'
  testImplementation 'org.springframework.boot:spring-boot-testcontainers'
  testImplementation 'org.springframework.boot:spring-boot-docker-compose'
  testImplementation 'org.testcontainers:junit-jupiter'
  testImplementation 'org.testcontainers:mysql'
  testImplementation 'org.testcontainers:postgresql'
  
  // Selenium WebDriver for E2E Testing
  testImplementation 'org.seleniumhq.selenium:selenium-java'
  testImplementation 'org.seleniumhq.selenium:selenium-chrome-driver'
  testImplementation 'io.github.bonigarcia:webdrivermanager:5.9.2'
  
  // REST API Testing
  testImplementation 'io.rest-assured:rest-assured'
  testImplementation 'io.rest-assured:json-schema-validator'
  
  // Asynchronous Testing Support
  testImplementation 'org.awaitility:awaitility'
  
  // Reactive Testing Support
  testImplementation 'org.springframework.boot:spring-boot-starter-webflux'
  
  checkstyle "io.spring.javaformat:spring-javaformat-checkstyle:${springJavaformatCheckstyleVersion}"
  checkstyle "com.puppycrawl.tools:checkstyle:${checkstyleVersion}"
}

tasks.named('test') {
  useJUnitPlatform()
}

// Test suite configurations for different test types
tasks.register('apiTests', Test) {
  description = 'Run API tests'
  group = 'verification'
  useJUnitPlatform()
  testClassesDirs = sourceSets.test.output.classesDirs
  classpath = sourceSets.test.runtimeClasspath
  include '**/*ApiTest*'
  include '**/*RestTest*'
}

tasks.register('integrationTests', Test) {
  description = 'Run integration tests'
  group = 'verification'
  useJUnitPlatform()
  testClassesDirs = sourceSets.test.output.classesDirs
  classpath = sourceSets.test.runtimeClasspath
  include '**/*IntegrationTest*'
  include '**/*ContainerTest*'
}

tasks.register('performanceTests', Test) {
  description = 'Run performance tests'
  group = 'verification'
  useJUnitPlatform()
  testClassesDirs = sourceSets.test.output.classesDirs
  classpath = sourceSets.test.runtimeClasspath
  include '**/*PerformanceTest*'
  include '**/*LoadTest*'
}

tasks.register('e2eTests', Test) {
  description = 'Run end-to-end tests'
  group = 'verification'
  useJUnitPlatform()
  testClassesDirs = sourceSets.test.output.classesDirs
  classpath = sourceSets.test.runtimeClasspath
  include '**/*E2ETest*'
  include '**/*SeleniumTest*'
  systemProperty 'webdriver.chrome.driver', System.getProperty('webdriver.chrome.driver', '')
}

tasks.register('allTests') {
  description = 'Run all test suites'
  group = 'verification'
  dependsOn test, apiTests, integrationTests, performanceTests, e2eTests
}

checkstyle {
  configDirectory = project.file('src/checkstyle')
  configFile = file('src/checkstyle/nohttp-checkstyle.xml')
}

checkstyleNohttp {
  configDirectory = project.file('src/checkstyle')
  configFile = file('src/checkstyle/nohttp-checkstyle.xml')
}

tasks.named("formatMain").configure { dependsOn("checkstyleMain") }
tasks.named("formatMain").configure { dependsOn("checkstyleNohttp") }

tasks.named("formatTest").configure { dependsOn("checkstyleTest") }
tasks.named("formatTest").configure { dependsOn("checkstyleNohttp") }

checkstyleAot.enabled = false
checkstyleAotTest.enabled = false

checkFormatAot.enabled = false
checkFormatAotTest.enabled = false

formatAot.enabled = false
formatAotTest.enabled = false

wrapper {
  gradleVersion = "8.14.3"
  distributionType = Wrapper.DistributionType.ALL
}
